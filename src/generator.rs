use std::borrow::Cow;

use tracing::{event, Level};

const DEFAULT_DATA: &[Cow<'static, str>] = &[
	Cow::Borrowed("^XA"),
	Cow::Borrowed("^IDR:*.*"),
	Cow::Borrowed("^XZ"),
	Cow::Borrowed("^XA"),
	Cow::Borrowed("^SZ2"),
	Cow::Borrowed("^XZ"),
	Cow::Borrowed("^XA"),
	Cow::Borrowed("^PON"),
	Cow::Borrowed("^PW635"),
	Cow::Borrowed("^LL929"),
	Cow::Borrowed("^LH0,006"),
	Cow::Borrowed("^MNY"),
	Cow::Borrowed("^XZ"),
	Cow::Borrowed("~DGET0,1800,45,z0mz0z0z0rH0")
];

pub fn generate_zpl(num: u32) -> String {
	event!(Level::TRACE, %num, "generating zpl");
	let mut num_bytes = num.to_string().into_bytes();

	let orig_num = num;
	let check_digit_byte = crate::check_digit::digit_checksum(&num_bytes);
	num_bytes.extend(check_digit_byte);
	let num = String::from_utf8(num_bytes).unwrap();
	let mut output = DEFAULT_DATA.to_vec();
	output.extend_from_slice(&[
		Cow::Borrowed("^XA"),
		Cow::Owned(format!("^FX{orig_num}")),
		Cow::Borrowed("^PMN"),
		Cow::Borrowed("^LRN"),
		Cow::Borrowed("^BY3,2.0"),
		Cow::Owned(format!("^FO165,542^BKN,N,60,N,N,A,B^FD{num:0>8}^FS")),
		Cow::Borrowed("^FO139,690^XGET0^FS"),
		Cow::Owned(format!("^FO216,790^A0N,37,53^FD{num:0>8}^FS")),
		Cow::Borrowed("^BY3,2.0"),
		Cow::Owned(format!("^FO165,723^BKN,N,60,N,N,A,B^FD{num:0>8}^FS")),
		Cow::Owned(format!("^FO216,879^A0N,37,53^FD{num:0>8}^FS")),
		Cow::Owned(format!("^FO216,610^A0N,37,53^FD{num:0>8}^FS")),
		Cow::Borrowed("^RS8,,,3,N"),
		Cow::Owned(format!(
			"^RFW,H,4,8^FD{:0>8X}^FS",
			flip_endian(num.parse().unwrap())
		)),
		Cow::Borrowed("^PQ1,0,1,Y"),
		Cow::Borrowed("^XZ"),
	]);

	output.join("\n")
}

#[cfg(target_endian = "big")]
const fn flip_endian(s: u32) -> u32 {
	s.to_le()
}

#[cfg(target_endian = "little")]
const fn flip_endian(s: u32) -> u32 {
	s.to_be()
}
